## 提要

1. paxos
2. ZAb
3. watch
4. API： 不怕写zk client
5. callback -> reactive响应式编程，更充分地压榨OS，HW资源、性能  

Zookeeper走分布式协调：  

扩展性：框架架构就是包括了各个不同的角色，他们之间通信联系，且它们自己是有自己的职能的。通过上次的讲解，已知的角色有leader、follower。除了他们意外，还有个角色叫observer。从扩展性的角度来讲，还有个特点是读写分离，其中所有的
	   增删改查都可以给leader，查询可以压在follower或者observer身上。为什么还要有个Observer呢？是因为zk要求快，一个层面上是它活着的时候响应快，另一个层面是从失败到恢复可用也很快。zk从没有leader到有leader，一定是经过
	   了一个投票选举的过程选出来了一个leader。只有follower才能选举，observer其实是比follower更low的一个级别。leader挂了的话，各个follower进行投票，observer一边等着，一旦选出来了新的leader，observer只是追随
	   leader，同步数据、接受用户的查询用户发写请求的时候转给leader。投票选举的效率由follower的数量决定。observer放大查询能力，30台机器有个21台observer。zk更倾向于被主要用来查询，而不是更改。如何在配置文件中设置
	   observer？
	   	```
		server.1=0.0.0.0:2888:3888
		server.2=node02:2888:3888
		server.3=node03:2888:3888
		server.4=node04:2888:3888:observer
		```
		node04就成了observer。多台zk机器做集群的时候，不带observer的条目数要足够少，个位数就可以了  
		
可靠性：`攘其外必先安其内`这句话非常好的描述了zk的特征。zk有leader挂了的时候，但是他可以快速选出一个来。他的可靠性来自于快速恢复。对外提供服务必须内部安定，皇帝挂了，先暂停服务，国不可一日无君，赶紧选出一个新皇帝对外提供服务
		`攘其外`代表了leader可用的时候；`安其内`是指选主的过程。数据的可靠可用一致性，这是指攘外，一致性是一个最终一致性：5台中有3台数据一致了，另外两台是可以最终同步达到数据一致的，这一过程中这两台要不要对外提供服务？暂时
		没有同步（过半数）的机器是要shutdown服务的（这几个节点安内的工作还没做完）Paxos： https://www.douban.com/note/208430424/  过半通过，两阶段提交，在分布式条件下解决消息的传递.zk对paxos有个更简单的实现：ZAB
		协议，更容易实现数据在可用状态下的同步。ZAB是zookeeper的原子广播。ZAB作用在可用（有leader）状态。原子：要么成功要么失败，都没有中间状态（队列 + 2阶段提交）。广播：分布式多节点，广播并不代表全部都能听到，尤其是
		UDP协议，但一定是过半了。zk自己维护一个队列：FIFO顺序性 + 2PC。
		1个leader + 2个folloer的集群。Follower接到client的create请求，Follower转给leader，leader递增一个Zxid然后向两个follower都发起写日志的事，让所有人写创建这个事儿的日志。zk的数据状态在内存，用磁盘保存日
		志。这里只是在磁盘中写日志，而没有立刻在内存中创建出节点。leader向每个follower发消息是通过一个队列进行的，每个follower会回送消息确认。当有一个follower回复确认了，再加上leader自己的那一票，已经用3/2+1过半的票数
		了，这时候leader发送write命令给各个follower去创建节点，各个节点写成功之后，也会返回一个ok。最终leader给客户端返回ok，写完了。读请求过来之后sync是可选项，可以读到老的数据，也可以加sync要最新的，这样会触发
		callback。zab主从模型，leader是单点，leader处理顺序性的事情，维护队列和两阶段提交、过半通过相对于容易一点。zab对paxos做了简化。leader挂了的话，所有人对外都停止服务，选出新主，同步数据，然后再开始提供服务，这样
		才可以真正的保证最终一致性。sync的回调是单独调一个sync的同步的命令，然后在里面写一个回调，回调的时候，sync同步成功了会调一个注册的方法，注册的方法里面可以再去调get.单独调用get有可能拿到旧的数据。对于挂了之后再上线
		的节点，通过3888连上，一看有leader了，就通过2888同步数据，同步完了之后才能对外提供服务。如果来了一个写操作，leader还没来得及告诉follower就挂了，那这个写操作则回滚，跟mysql一样。只要leader拿不到过半的票数，任何
		写操作都不能发生。因为如果写成功的话，别的节点一旦恢复，过半的话，就会被影响。zk可以不用看它的源码。  
		
		所有设计的每个环节都是为了最终一致性，但是不要因为技术而技术，他是为了快速的恢复给客户端那个ok，且保证将来同步完数据别人也能取到正确的数据。挂的太多就不可用了，无法选主。  
		
		不可用状态，场景：第一次启动集群（没有数据、版本、历史状态）、重启集群、leader挂了以后（有的节点数据多，有的节点数据少）。每个节点会有一个myid和Zxid。选择出的新的leader要满足的条件：经验最丰富、数据最全的，也就是
		Zxid最大的；如果好多人经验都很丰富，这时候论资排辈，看谁的年龄最大，也就是myid最大的。ps：过半通过的数据才是真数据，你见到的可用的Zxid都是被过半通过了的，是不允许被怀疑的。如果只是死了一小部分机器，一定有一大部分机
		器拿着这个最大的Zxid的。在集群第一次启动的时候，只要达到了过半的台数，就可以通信选出那个Zxid最大的leader。leader挂了重新选的过程：只要根据Zxid和myid，应该当主的那台机器被联系上了，就会通过两两连接最终获得所有人
		的一致投票即获得当前所有的票数，然后开启2888端口接受连接，其他的机器去连接leader的2888端口。快速操作，200ms选出一个leader。最终回到描述zk的两个词：1.简单 2。快。选举过程：1. 3888两两通信，与其他活着的 2.只要
		任何人投票，都会触发那个准leader发起自己的投票 3. 推选的逻辑：先比较最大Zxid，如果相同，则取myid最大的。一般都只是比比myid就可以了. down的机器太多的话整个集群不可用，Zxid分两段，第一段是代数，代数比别人低就不
		用比具体transaction了。可靠性比Redis强，但是速度比Redis慢
		
Watch： 手表、观察、监控。zk可以做到统一视图，目录树的结构。zk只对外提供协调服务。watch和心跳线程或者脚本的比较：1.方向性：一个服务向另一个服务不断地发心跳包已确定另一个是否还活着。而zk的session+临时节点，当创建这个节点
		的client挂掉的话，过了有效期session就没了，临时节点也就没了，而这会产生一个事件。事件的类型有create、delete、change、children（建立子目录），谁在观察这个事件，watch会回调（callback）观察的那个方法 2.时效
		性：心跳要等某一个时间点才能知道对方挂了，而watch一旦接收到事件立刻触发，时效性更强。观察者client在get完了之后还要watch一下那个临时节点，注册监控回调方法。
		
顺序性（时序性）
快速！

## API

杂记：spring的redis、spark、flink、dubbo底层都牵扯到netty